/* 2. 당해 연도 채널 노출 수 (중복제외) - 표 SQL */
WITH WT_WHERE AS
    (
        SELECT FRST_DT_YEAR             AS FR_DT      /* 기준일의  1월  1일       */
              ,BASE_YEAR    ||'-12-31'  AS TO_DT      /* 기준일의 12월 31일       */
              ,FRST_DT_YEAR_YOY         AS FR_DT_YOY  /* 기준년의  1월  1일  -1년 */
              ,BASE_YEAR_YOY||'-12-31'  AS TO_DT_YOY  /* 기준일의 12월 31일  -1년 */
              ,BASE_YEAR                AS THIS_YEAR  /* 기준일의 연도            */
              ,BASE_YEAR_YOY            AS LAST_YEAR  /* 기준일의 연도       -1년 */
          FROM DASH.DASH_INITIAL_DATE
    ), WT_COPY AS
    (
        SELECT 1                                              AS SORT_KEY
              ,'올해 '   ||  (SELECT THIS_YEAR FROM WT_WHERE) AS ROW_TITL
     UNION ALL
        SELECT 2                                              AS SORT_KEY
              ,'전년도 ' ||  (SELECT LAST_YEAR FROM WT_WHERE) AS ROW_TITL
     UNION ALL
        SELECT 3                                              AS SORT_KEY
              ,'YoY'                                          AS ROW_TITL
     UNION ALL
        SELECT 4                                              AS SORT_KEY
              ,'MoM'                                          AS ROW_TITL
    ), WT_VIST AS
    (
        SELECT CAST(CAST(DATE AS TEXT) AS DATE)  AS STATISTICS_DATE
              ,PRODUCT_CLICKs AS VIST_CNT
          FROM DASH_RAW.OVER_{TAG}_TRANSACTION_OVERVIEW A
         WHERE CAST(CAST(DATE AS TEXT) AS DATE)   BETWEEN (SELECT CAST(CAST(FR_DT AS TEXT) AS DATE)   FROM WT_WHERE) AND (SELECT CAST(CAST(TO_DT AS TEXT) AS DATE)   FROM WT_WHERE)
    ), WT_VIST_YOY AS
    (
        SELECT CAST(CAST(DATE AS TEXT) AS DATE)   AS STATISTICS_DATE
              ,PRODUCT_CLICKs  AS VIST_CNT
          FROM DASH_RAW.OVER_{TAG}_TRANSACTION_OVERVIEW A
         WHERE CAST(CAST(DATE AS TEXT) AS DATE)   BETWEEN (SELECT CAST(CAST(FR_DT_YOY AS TEXT) AS DATE)   FROM WT_WHERE) AND (SELECT CAST(CAST(TO_DT_YOY AS TEXT) AS DATE)   FROM WT_WHERE)
    ), WT_SUM AS
    (
        SELECT 1  AS SORT_KEY
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 01 THEN VIST_CNT END) AS VIST_CNT_01  /* 01월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 02 THEN VIST_CNT END) AS VIST_CNT_02  /* 02월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 03 THEN VIST_CNT END) AS VIST_CNT_03  /* 03월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 04 THEN VIST_CNT END) AS VIST_CNT_04  /* 04월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 05 THEN VIST_CNT END) AS VIST_CNT_05  /* 05월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 06 THEN VIST_CNT END) AS VIST_CNT_06  /* 06월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 07 THEN VIST_CNT END) AS VIST_CNT_07  /* 07월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 08 THEN VIST_CNT END) AS VIST_CNT_08  /* 08월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 09 THEN VIST_CNT END) AS VIST_CNT_09  /* 09월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 10 THEN VIST_CNT END) AS VIST_CNT_10  /* 10월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 11 THEN VIST_CNT END) AS VIST_CNT_11  /* 11월 방문자 수 */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 12 THEN VIST_CNT END) AS VIST_CNT_12  /* 12월 방문자 수 */
          FROM WT_VIST A
     UNION ALL
        SELECT 2  AS SORT_KEY
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 01 THEN VIST_CNT END) AS VIST_CNT_01  /* 01월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 02 THEN VIST_CNT END) AS VIST_CNT_02  /* 02월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 03 THEN VIST_CNT END) AS VIST_CNT_03  /* 03월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 04 THEN VIST_CNT END) AS VIST_CNT_04  /* 04월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 05 THEN VIST_CNT END) AS VIST_CNT_05  /* 05월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 06 THEN VIST_CNT END) AS VIST_CNT_06  /* 06월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 07 THEN VIST_CNT END) AS VIST_CNT_07  /* 07월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 08 THEN VIST_CNT END) AS VIST_CNT_08  /* 08월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 09 THEN VIST_CNT END) AS VIST_CNT_09  /* 09월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 10 THEN VIST_CNT END) AS VIST_CNT_10  /* 10월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 11 THEN VIST_CNT END) AS VIST_CNT_11  /* 11월 방문자 수 - YoY */
              ,SUM(CASE WHEN EXTRACT(MONTH FROM CAST(STATISTICS_DATE AS DATE)) = 12 THEN VIST_CNT END) AS VIST_CNT_12  /* 12월 방문자 수 - YoY */
          FROM WT_VIST_YOY A
    ) , WT_BASE AS
    (
         SELECT A.SORT_KEY
               ,A.ROW_TITL
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_01
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_01, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_01, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_01, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_12, 2) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_01
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_02
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_02, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_02, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_02, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_01, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_02
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_03
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_03, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_03, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_03, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_02, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_03
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_04
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_04, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_04, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_04, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_03, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_04
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_05
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_05, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_05, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_05, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_04, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_05
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_06
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_06, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_06, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_06, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_05, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_06
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_07
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_07, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_07, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_07, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_06, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_07
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_08
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_08, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_08, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_08, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_07, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_08
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_09
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_09, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_09, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_09, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_08, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_09
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_10
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_10, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_10, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_10, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_09, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_10
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_11
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_11, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_11, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_11, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_10, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_11
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN VIST_CNT_12
                  WHEN A.SORT_KEY = 3
                  THEN ((LAG(VIST_CNT_12, 2) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_12, 1) OVER(ORDER BY A.SORT_KEY))) -1) * 100
                  WHEN A.SORT_KEY = 4
                  THEN ((LAG(VIST_CNT_12, 3) OVER(ORDER BY A.SORT_KEY) / COALESCE(LAG(VIST_CNT_11, 3) OVER(ORDER BY A.SORT_KEY))) -1) * 100
               END AS VIST_CNT_12
          FROM WT_COPY A LEFT OUTER JOIN 
               WT_SUM  B 
            ON (A.SORT_KEY = B.SORT_KEY)
    ) 
    
     SELECT ROW_TITL
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_01 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_01 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_01   /* 01월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_02 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_02 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_02   /* 02월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_03 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_03 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_03   /* 03월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_04 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_04 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_04   /* 04월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_05 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_05 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_05   /* 05월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_06 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_06 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_06   /* 06월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_07 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_07 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_07   /* 07월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_08 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_08 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_08   /* 08월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_09 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_09 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_09   /* 09월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_10 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_10 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_10   /* 10월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_11 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_11 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_11   /* 11월 방문자 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(VIST_CNT_12 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(VIST_CNT_12 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS VIST_CNT_12   /* 12월 방문자 */
      FROM WT_BASE
  ORDER BY SORT_KEY