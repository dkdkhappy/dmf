/* [추가] 1. 구매자 수 시계열 그래프 - 하단표 SQL                   */
/*    오늘(2023.03.04)일 경우 => 기준일 : 2023.03.03              */
/*                               올해   : 2023.01.01 ~ 2023.12.31 */
/*                               전년도 : 2022.01.01 ~ 2022.12.31 */
/*    올해, 전년도는 방문자 수라서 소숫점이 없게 표시하고         */
/*    YoY, MoM는 증감률이라서 소숫점 2자리까지 표시하도록         */
/*    VARCHAR로 형변환하여 리턴함.                                */
WITH WT_WHERE AS
    (
        SELECT FRST_DT_YEAR             AS FR_DT      /* 기준일의  1월  1일       */
              ,BASE_YEAR    ||'-12-31'  AS TO_DT      /* 기준일의 12월 31일       */
              ,FRST_DT_YEAR_YOY         AS FR_DT_YOY  /* 기준년의  1월  1일  -1년 */
              ,BASE_YEAR_YOY||'-12-31'  AS TO_DT_YOY  /* 기준일의 12월 31일  -1년 */
              ,BASE_YEAR                AS THIS_YEAR  /* 기준일의 연도            */
              ,BASE_YEAR_YOY            AS LAST_YEAR  /* 기준일의 연도       -1년 */
          FROM DASH.DASH_INITIAL_DATE
    ), WT_COPY AS
    (
        SELECT 1                                              AS SORT_KEY
              ,'올해 '   ||  (SELECT THIS_YEAR FROM WT_WHERE) AS ROW_TITL
     UNION ALL
        SELECT 2                                              AS SORT_KEY
              ,'전년도 ' ||  (SELECT LAST_YEAR FROM WT_WHERE) AS ROW_TITL
     UNION ALL
        SELECT 3                                              AS SORT_KEY
              ,'YoY'                                          AS ROW_TITL
     UNION ALL
        SELECT 4                                              AS SORT_KEY
              ,'MoM'                                          AS ROW_TITL
    ), WT_CAST AS
    (
        SELECT STATISTICS_DATE
              ,NUMBER_OF_PAID_BUYERS AS PAID_CNT  /* 구매자수 */
          FROM DASH_RAW.OVER_{TAG}_OVERALL_STORE A
         WHERE STATISTICS_DATE BETWEEN (SELECT FR_DT FROM WT_WHERE) AND (SELECT TO_DT FROM WT_WHERE)
    ), WT_CAST_YOY AS
    (
        SELECT STATISTICS_DATE
              ,NUMBER_OF_PAID_BUYERS AS PAID_CNT   /* 구매자수 YoY */
          FROM DASH_RAW.OVER_{TAG}_OVERALL_STORE A
         WHERE STATISTICS_DATE BETWEEN (SELECT FR_DT_YOY FROM WT_WHERE) AND (SELECT TO_DT_YOY FROM WT_WHERE)
    ), WT_SUM AS
    (
        SELECT 1  AS SORT_KEY
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '01' THEN PAID_CNT END) AS PAID_CNT_01 /* 01월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '02' THEN PAID_CNT END) AS PAID_CNT_02 /* 02월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '03' THEN PAID_CNT END) AS PAID_CNT_03 /* 03월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '04' THEN PAID_CNT END) AS PAID_CNT_04 /* 04월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '05' THEN PAID_CNT END) AS PAID_CNT_05 /* 05월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '06' THEN PAID_CNT END) AS PAID_CNT_06 /* 06월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '07' THEN PAID_CNT END) AS PAID_CNT_07 /* 07월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '08' THEN PAID_CNT END) AS PAID_CNT_08 /* 08월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '09' THEN PAID_CNT END) AS PAID_CNT_09 /* 09월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '10' THEN PAID_CNT END) AS PAID_CNT_10 /* 10월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '11' THEN PAID_CNT END) AS PAID_CNT_11 /* 11월 구매자수 */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '12' THEN PAID_CNT END) AS PAID_CNT_12 /* 12월 구매자수 */
          FROM WT_CAST A
     UNION ALL
        SELECT 2  AS SORT_KEY
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '01' THEN PAID_CNT END) AS PAID_CNT_01 /* 01월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '02' THEN PAID_CNT END) AS PAID_CNT_02 /* 02월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '03' THEN PAID_CNT END) AS PAID_CNT_03 /* 03월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '04' THEN PAID_CNT END) AS PAID_CNT_04 /* 04월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '05' THEN PAID_CNT END) AS PAID_CNT_05 /* 05월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '06' THEN PAID_CNT END) AS PAID_CNT_06 /* 06월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '07' THEN PAID_CNT END) AS PAID_CNT_07 /* 07월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '08' THEN PAID_CNT END) AS PAID_CNT_08 /* 08월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '09' THEN PAID_CNT END) AS PAID_CNT_09 /* 09월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '10' THEN PAID_CNT END) AS PAID_CNT_10 /* 10월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '11' THEN PAID_CNT END) AS PAID_CNT_11 /* 11월 구매자수 YoY */
              ,SUM(CASE WHEN TO_CHAR(CAST(STATISTICS_DATE AS DATE), 'MM') = '12' THEN PAID_CNT END) AS PAID_CNT_12 /* 12월 구매자수 YoY */
          FROM WT_CAST_YOY A
    ), WT_BASE AS
    (
         SELECT A.SORT_KEY
               ,A.ROW_TITL
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_01
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_01, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_01, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_01, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_01, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_12, 2) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_12, 2) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_01  /* 01월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_02
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_02, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_02, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_02, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_02, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_01, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_01, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_02  /* 02월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_03
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_03, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_03, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_03, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_03, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_02, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_02, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_03  /* 03월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_04
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_04, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_04, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_04, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_04, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_03, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_03, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_04  /* 04월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_05
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_05, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_05, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_05, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_05, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_04, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_04, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_05  /* 05월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_06
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_06, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_06, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_06, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_06, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_05, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_05, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_06  /* 06월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_07
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_07, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_07, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_07, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_07, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_06, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_06, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_07  /* 07월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_08
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_08, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_08, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_08, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_08, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_07, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_07, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_08  /* 08월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_09
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_09, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_09, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_09, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_09, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_08, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_08, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_09  /* 09월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_10
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_10, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_10, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_10, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_10, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_09, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_09, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_10  /* 10월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_11
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_11, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_11, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_11, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_11, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_10, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_10, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_11  /* 11월 구매자수 */
               ,CASE
                  WHEN A.SORT_KEY IN (1, 2)
                  THEN PAID_CNT_12
                  WHEN A.SORT_KEY = 3
                  THEN (LAG(PAID_CNT_12, 2) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_12, 1) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_12, 1) OVER(ORDER BY A.SORT_KEY) * 100
                  WHEN A.SORT_KEY = 4
                  THEN (LAG(PAID_CNT_12, 3) OVER(ORDER BY A.SORT_KEY) - COALESCE(LAG(PAID_CNT_11, 3) OVER(ORDER BY A.SORT_KEY))) / LAG(PAID_CNT_11, 3) OVER(ORDER BY A.SORT_KEY) * 100
               END AS PAID_CNT_12  /* 12월 구매자수 */
          FROM WT_COPY A LEFT OUTER JOIN 
               WT_SUM  B 
            ON (A.SORT_KEY = B.SORT_KEY)
    )
    SELECT ROW_TITL
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_01 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_01 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_01   /* 01월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_02 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_02 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_02   /* 02월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_03 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_03 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_03   /* 03월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_04 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_04 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_04   /* 04월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_05 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_05 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_05   /* 05월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_06 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_06 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_06   /* 06월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_07 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_07 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_07   /* 07월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_08 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_08 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_08   /* 08월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_09 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_09 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_09   /* 09월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_10 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_10 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_10   /* 10월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_11 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_11 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_11   /* 11월 구매자수 */
          ,CASE WHEN SORT_KEY IN (1, 2) THEN TO_CHAR(CAST(PAID_CNT_12 AS DECIMAL(20,0)), 'FM999,999,999,999,999') ELSE TO_CHAR(CAST(PAID_CNT_12 AS DECIMAL(20,2)), 'FM999,999,999,999,990.00%') END AS PAID_CNT_12   /* 12월 구매자수 */
      FROM WT_BASE
  ORDER BY SORT_KEY
;